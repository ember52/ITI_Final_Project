pipeline {
    agent {
        kubernetes {
            label 'ubuntu-agent'
            defaultContainer 'ubuntu'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                jenkins: slave
                jenkins/label-digest: "03ddc3eddf95d5470d5c7fb6d2937abaeca3b79e"
                jenkins/label: ubuntu-agent
              name: ubuntu-agent
              namespace: tools
            spec:
              serviceAccountName: jenkins
              containers:
              - name: ubuntu
                image: ubuntu:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
                  readOnly: false
                - mountPath: /root/.kube
                  name: kubeconfig
                  readOnly: true
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
              - name: workspace-volume
                emptyDir: {}
              - name: kubeconfig
                projected:
                  sources:
                  - serviceAccountToken:
                      path: token
                      expirationSeconds: 86400
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    stages {
        stage('Install required packages') {
            steps {
                container('ubuntu') {
                    // Install kubectl and requirements in the container
                    sh 'apt-get update -y'
                    sh 'apt-get install git -y'
                    sh 'apt-get install curl -y'
                    sh 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl'
                    sh 'chmod +x ./kubectl'
                    sh 'mv ./kubectl /usr/local/bin/kubectl'
                }
            }
        }

        stage('Clone app Repository') {
            steps {
                container('ubuntu') {
                    script {
                        sh 'git clone -b main https://github.com/ember52/ITI_Final_Project'
                        sh 'ls -la'
                    }
                }
            }
        }

        stage('Deploy application from image on Minikube') {
            steps {
                container('ubuntu') {
                    // Change directory to the cloned repository
                    script {
                        dir('Final') {
                            // Deploy the app to Cluster
                            sh """
                            kubectl apply -f app-deployment
                            """
                        }
                    }
                }
            }
        }      
    }
}
